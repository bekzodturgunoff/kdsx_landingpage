---
import { translations, LANGUAGE_OPTIONS, DEFAULT_LANGUAGE } from "../i18n";

const languageOptions = LANGUAGE_OPTIONS;
const translationsJSON = JSON.stringify(translations);
const fallbackLanguage = DEFAULT_LANGUAGE;
---
<header class="sticky top-0 z-50 px-4 sm:px-6">
  <div class="max-w-6xl mx-auto">
    <div class="mt-6 flex items-center justify-between rounded-full border border-brand-cta-text/15 dark:border-brand-cta-text-dark/20 bg-brand-bg/85 dark:bg-brand-bg-dark/50 px-4 py-3 backdrop-blur-2xl shadow-[0_20px_80px_-60px_rgba(26,77,26,0.65)]">
      <div class="flex items-center gap-3 text-base sm:text-lg font-semibold text-brand-text dark:text-brand-text-dark">
        <span class="rounded-full bg-brand-cta/20 px-3 py-1 text-xs sm:text-sm uppercase tracking-[0.3em] text-brand-cta-text dark:text-brand-cta-text">KDSX</span>
        <span class="hidden sm:inline-block text-sm font-medium tracking-tight text-brand-text/80 dark:text-brand-text-dark/80" data-i18n="brand.tagline">Total Restaurant Control</span>
      </div>

      <!-- Desktop nav -->
      <nav class="hidden md:flex items-center gap-6 text-xs font-medium uppercase tracking-[0.35em] text-brand-text/80 dark:text-brand-text-dark/70">
        <a href="#features" class="group relative transition-colors duration-300 hover:text-brand-cta" data-i18n="nav.features">
          Features
          <span class="absolute -bottom-2 left-0 h-[2px] w-full origin-left scale-x-0 bg-brand-cta transition-transform duration-300 group-hover:scale-x-100"></span>
        </a>
        <a href="#pricing" class="group relative transition-colors duration-300 hover:text-brand-cta" data-i18n="nav.pricing">
          Pricing
          <span class="absolute -bottom-2 left-0 h-[2px] w-full origin-left scale-x-0 bg-brand-cta transition-transform duration-300 group-hover:scale-x-100"></span>
        </a>
        <a href="#faq" class="group relative transition-colors duration-300 hover:text-brand-cta" data-i18n="nav.faq">
          FAQ
          <span class="absolute -bottom-2 left-0 h-[2px] w-full origin-left scale-x-0 bg-brand-cta transition-transform duration-300 group-hover:scale-x-100"></span>
        </a>
      </nav>

      <div class="hidden md:flex items-center gap-3 text-xs font-semibold text-brand-text/80 dark:text-brand-text-dark/80">
        <label class="sr-only" for="desktop-lang-select">Language</label>
        <div class="relative">
          <select id="desktop-lang-select" class="lang-select appearance-none rounded-full border border-brand-cta-text/25 dark:border-brand-cta-text-dark/30 bg-white/70 px-4 py-2 pr-10 text-xs font-semibold uppercase tracking-[0.25em] text-brand-text shadow-sm transition focus:outline-none focus:ring-2 focus:ring-brand-cta dark:bg-white/10 dark:text-brand-text-dark" aria-label="Language switcher">
            {languageOptions.map(({ value, label }) => (
              <option value={value}>{label}</option>
            ))}
          </select>
          <svg class="pointer-events-none absolute right-3 top-1/2 h-3 w-3 -translate-y-1/2 text-brand-text/60 dark:text-brand-text-dark/60" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 1L5 5L9 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </div>

        <button data-theme-toggle aria-label="Toggle theme" class="flex h-10 w-10 items-center justify-center rounded-full bg-brand-cta/15 text-brand-text transition duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-brand-cta dark:bg-brand-cta-text-dark/20 dark:text-brand-text-dark">
          <span class="sr-only">Toggle theme</span>
          <svg data-theme-icon class="w-5 h-5 transition-transform duration-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"/>
            <g id="sun-rays">
              <path d="M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.95l-.71.71M21 12h-1M4 12H3m16.66 5.66l-.71-.71M4.05 4.05l-.71-.71" stroke-linecap="round" stroke-linejoin="round"/>
            </g>
          </svg>
        </button>
      </div>

      <!-- Mobile controls -->
      <div class="flex items-center gap-2 md:hidden">
        <label class="sr-only" for="mobile-lang-select">Language</label>
        <div class="relative">
          <select id="mobile-lang-select" class="lang-select appearance-none rounded-full border border-brand-cta-text/20 bg-white/80 px-3 py-2 pr-9 text-xs font-semibold uppercase tracking-[0.25em] text-brand-text focus:outline-none focus:ring-2 focus:ring-brand-cta dark:bg-white/10 dark:text-brand-text-dark" aria-label="Language switcher">
            {languageOptions.map(({ value, label }) => (
              <option value={value}>{label}</option>
            ))}
          </select>
          <svg class="pointer-events-none absolute right-3 top-1/2 h-3 w-3 -translate-y-1/2 text-brand-text/60 dark:text-brand-text-dark/60" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 1L5 5L9 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </div>
        <button data-theme-toggle aria-label="Toggle theme" class="flex h-9 w-9 items-center justify-center rounded-full bg-brand-cta/15 text-brand-text focus:outline-none focus:ring-2 focus:ring-brand-cta dark:bg-brand-cta-text-dark/20 dark:text-brand-text-dark">
          <svg data-theme-icon class="w-5 h-5 transition-transform duration-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"/>
            <g id="sun-rays">
              <path d="M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.95l-.71.71M21 12h-1M4 12H3m16.66 5.66l-.71-.71M4.05 4.05l-.71-.71" stroke-linecap="round" stroke-linejoin="round"/>
            </g>
          </svg>
        </button>
        <button id="menu-toggle" aria-expanded="false" aria-controls="mobile-menu" aria-label="Open menu" class="flex h-9 w-9 items-center justify-center rounded-full bg-brand-cta/15 text-brand-text focus:outline-none focus:ring-2 focus:ring-brand-cta dark:bg-brand-cta-text-dark/20 dark:text-brand-text-dark">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path d="M4 6h16M4 12h16M4 18h16" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile dropdown -->
  <div id="mobile-menu" class="md:hidden hidden px-4 sm:px-6">
    <nav class="mx-auto mt-3 flex max-w-6xl flex-col gap-4 rounded-3xl border border-brand-cta-text/15 bg-brand-bg/95 px-4 py-6 text-sm font-medium text-brand-text shadow-lg dark:border-brand-cta-text-dark/20 dark:bg-brand-bg-dark/90 dark:text-brand-text-dark">
      <a href="#features" class="flex items-center justify-between rounded-2xl px-4 py-3 uppercase tracking-[0.25em] transition-colors duration-300 hover:bg-brand-cta/10" data-i18n="nav.features">Features</a>
      <a href="#pricing" class="flex items-center justify-between rounded-2xl px-4 py-3 uppercase tracking-[0.25em] transition-colors duration-300 hover:bg-brand-cta/10" data-i18n="nav.pricing">Pricing</a>
      <a href="#faq" class="flex items-center justify-between rounded-2xl px-4 py-3 uppercase tracking-[0.25em] transition-colors duration-300 hover:bg-brand-cta/10" data-i18n="nav.faq">FAQ</a>

      <div class="rounded-2xl border border-brand-cta-text/12 bg-white/80 p-4 shadow-inner dark:border-brand-cta-text-dark/20 dark:bg-white/10">
        <button data-theme-toggle aria-label="Toggle theme" class="flex w-full items-center justify-between gap-3 rounded-xl bg-brand-cta/10 px-4 py-3 text-sm font-semibold text-brand-text transition-transform duration-300 hover:translate-x-1 dark:bg-brand-cta-text-dark/15 dark:text-brand-text-dark">
          <span class="inline-flex items-center gap-3">
            <svg data-theme-icon class="h-5 w-5 transition-transform duration-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"/>
              <g id="sun-rays">
                <path d="M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.95l-.71.71M21 12h-1M4 12H3m16.66 5.66l-.71-.71M4.05 4.05l-.71-.71" stroke-linecap="round" stroke-linejoin="round"/>
              </g>
            </svg>
            <span class="uppercase tracking-[0.25em]" data-i18n="nav.themeToggle">Toggle theme</span>
          </span>
          <span class="text-xs font-semibold uppercase tracking-[0.35em] text-brand-cta-text dark:text-brand-cta-text">â‡„</span>
        </button>
      </div>
    </nav>
  </div>
</header>
<script type="application/json" id="translations-data" data-fallback={fallbackLanguage} set:html={translationsJSON}></script>
<script is:inline>
  (function setupHeader() {
    const LANGUAGE_STORAGE_KEY = "preferred-lang";
    const translationsNode = document.getElementById("translations-data");
    const TRANSLATION_FALLBACK = (translationsNode?.dataset?.fallback) || "en";
    let translations = {};
    try {
      translations = translationsNode ? JSON.parse(translationsNode.textContent || "{}") : {};
    } catch (error) {
      console.error("Failed to parse translations", error);
      translations = {};
    }

    const applyTranslations = (lang) => {
      const dictionary = translations[lang] || translations[TRANSLATION_FALLBACK] || {};
      const fallbackDictionary = translations[TRANSLATION_FALLBACK] || {};
      document.querySelectorAll("[data-i18n]").forEach((node) => {
        const key = node.getAttribute("data-i18n");
        if (!key) return;
        const value = dictionary[key] ?? fallbackDictionary[key];
        if (value !== undefined) {
          node.textContent = value;
        }
      });
    };

    const applyLanguage = (lang) => {
      const html = document.documentElement;
      html.setAttribute("lang", lang);
      try {
        localStorage.setItem(LANGUAGE_STORAGE_KEY, lang);
      } catch (_) {}
      document.querySelectorAll(".lang-select").forEach((select) => {
        if (select.value !== lang) {
          select.value = lang;
        }
      });
      applyTranslations(lang);
    };

    const bindLanguage = () => {
      const selects = document.querySelectorAll(".lang-select");
      if (!selects.length) {
        applyTranslations(document.documentElement.getAttribute("lang") || TRANSLATION_FALLBACK);
        return;
      }

      selects.forEach((select) => {
        if ((select)._boundLang) return;
        select.addEventListener("change", (event) => {
          const target = event.target;
          const lang = target.value || TRANSLATION_FALLBACK;
          applyLanguage(lang);
        });
        (select)._boundLang = true;
      });

      let storedLang;
      try {
        storedLang = localStorage.getItem(LANGUAGE_STORAGE_KEY);
      } catch (_) {
        storedLang = undefined;
      }
      const initialLang = storedLang || document.documentElement.getAttribute("lang") || TRANSLATION_FALLBACK;
      applyLanguage(initialLang);
    };

    const bindTheme = () => {
      const buttons = document.querySelectorAll('[data-theme-toggle]');
      const icons = document.querySelectorAll('[data-theme-icon]');
      buttons.forEach((btn) => {
        if ((btn)._boundTheme) return;
        btn.addEventListener('click', () => {
          const html = document.documentElement;
          const isDark = html.classList.contains('dark');
          
          if (isDark) {
            html.classList.remove('dark');
            try {
              localStorage.setItem('theme', 'light');
            } catch (_) {}
          } else {
            html.classList.add('dark');
            try {
              localStorage.setItem('theme', 'dark');
            } catch (_) {}
          }
          
          icons.forEach((icon) => {
            icon.classList.add('rotate-180');
            setTimeout(() => icon.classList.remove('rotate-180'), 400);
          });
        });
        (btn)._boundTheme = true;
      });
    };

    const bindMenu = () => {
      const menuToggle = document.getElementById('menu-toggle');
      const mobileMenu = document.getElementById('mobile-menu');
      if (menuToggle && mobileMenu && !(menuToggle)._boundMenu) {
        menuToggle.addEventListener('click', () => {
          const isOpen = !mobileMenu.classList.contains('hidden');
          if (isOpen) {
            mobileMenu.classList.add('hidden');
            menuToggle.setAttribute('aria-expanded', 'false');
            menuToggle.setAttribute('aria-label', 'Open menu');
          } else {
            mobileMenu.classList.remove('hidden');
            menuToggle.setAttribute('aria-expanded', 'true');
            menuToggle.setAttribute('aria-label', 'Close menu');
          }
        });
        (menuToggle)._boundMenu = true;
      }
    };

    // Run immediately and on pageshow (for bfcache)
    bindTheme();
    bindMenu();
    bindLanguage();
    window.addEventListener('pageshow', () => {
      bindTheme();
      bindMenu();
      bindLanguage();
    });
  })();
</script>