---
---
<!-- Plan Signup Wizard Modal -->
<div id="plan-wizard" class="fixed inset-0 z-[60] hidden" data-endpoint="/api/lead" data-email="info@kdsx.uz,bekzodturgunoff@gmail.com">
  <div class="absolute inset-0 bg-black/40 backdrop-blur-sm dark:bg-black/70"></div>
  <div class="relative mx-auto my-10 max-w-lg px-4">
    <div role="dialog" aria-modal="true" aria-labelledby="wizard-title" aria-describedby="wizard-subtitle" class="rounded-3xl border bg-[var(--color-brand-bg)] p-6 sm:p-7 md:p-8 shadow-2xl dark:border-white/20">
      <div class="flex items-start justify-between">
        <div>
          <h3 id="wizard-title" class="text-xl font-semibold text-[var(--color-brand-text)]" data-i18n="wizardTitle">Get your free demo account</h3>
          <p id="wizard-subtitle" class="mt-1 text-sm text-[var(--color-brand-text)] opacity-70" data-i18n="wizardSubtitle">Answer a couple of quick questions — we'll set up a demo and share credentials.</p>
        </div>
        <button type="button" id="wizard-close" aria-label="Close" data-i18n-aria-label="wizardSuccessCta" class="ml-4 rounded-full p-2 text-[var(--color-brand-text)] opacity-60 hover:bg-brand-cta/10 hover:opacity-100">
          <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 6l12 12M6 18L18 6" stroke-linecap="round"/></svg>
        </button>
      </div>
      <div class="mt-4 flex items-center gap-2 text-xs font-medium text-[var(--color-brand-text)] opacity-70">
  <span id="wizard-step-label">Step 1 of 7</span>
        <span class="mx-2 h-1 w-1 rounded-full bg-[var(--color-brand-text)] opacity-40"></span>
        <span id="wizard-plan-label" class="truncate" data-i18n="wizardPlanPrefix">Plan:</span>
      </div>

      <form id="wizard-form" class="mt-6 space-y-6">
        <!-- Step 1: Name -->
        <div data-step="0" class="step-panel">
          <label for="fullName" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardNameLabel">What's your name?</label>
          <input id="fullName" name="fullName" type="text" required data-i18n-placeholder="wizardNamePlaceholder" placeholder="e.g., Alex Kim" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
        </div>

        <!-- Step 2: Business name -->
        <div data-step="1" class="step-panel hidden">
          <label for="businessName" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardBusinessLabel">What's your restaurant's or market's name?</label>
          <input id="businessName" name="businessName" type="text" required data-i18n-placeholder="wizardBusinessPlaceholder" placeholder="e.g., Green Leaf Bistro" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
        </div>

        <!-- Step 3: Locations -->
        <div data-step="2" class="step-panel hidden">
          <label for="locations" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardLocationsLabel">How many locations do you operate?</label>
          <select id="locations" name="locations" required class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white">
            <option value="1" data-i18n="wizardLocationsOption1">1 location</option>
            <option value="2-5" data-i18n="wizardLocationsOption2">2–5 locations</option>
            <option value="6-10" data-i18n="wizardLocationsOption3">6–10 locations</option>
            <option value="11+" data-i18n="wizardLocationsOption4">11+ locations</option>
          </select>
        </div>

        <!-- Step 4: Service style / industry -->
        <div data-step="3" class="step-panel hidden">
          <label for="serviceStyle" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardServiceStyleLabel">What best describes your service style?</label>
          <select id="serviceStyle" name="serviceStyle" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white">
            <option value="" data-i18n="wizardServiceStyleOption0">Select one…</option>
            <option value="cafe" data-i18n="wizardServiceStyleOptionCafe">Cafe</option>
            <option value="bistro" data-i18n="wizardServiceStyleOptionBistro">Bistro</option>
            <option value="quick" data-i18n="wizardServiceStyleOptionQuick">Quick‑service</option>
            <option value="full" data-i18n="wizardServiceStyleOptionFull">Full‑service</option>
            <option value="bar" data-i18n="wizardServiceStyleOptionBar">Bar</option>
            <option value="market" data-i18n="wizardServiceStyleOptionMarket">Market</option>
            <option value="other" data-i18n="wizardServiceStyleOptionOther">Other</option>
          </select>
        </div>

        <!-- Step 5: Current POS -->
        <div data-step="4" class="step-panel hidden">
          <label for="currentPos" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardCurrentPosLabel">Which POS or systems are you using today?</label>
          <input id="currentPos" name="currentPos" type="text" data-i18n-placeholder="wizardCurrentPosPlaceholder" placeholder="e.g., Toast, Square, custom" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
        </div>

        <!-- Step 6: Credentials -->
        <div data-step="5" class="step-panel hidden">
          <div class="grid gap-4">
            <div>
              <label for="desiredUsername" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardUsernameLabel">Preferred username</label>
              <input id="desiredUsername" name="desiredUsername" type="text" required pattern="^[a-zA-Z0-9._-]{3,20}$" data-i18n-placeholder="wizardUsernamePlaceholder" placeholder="e.g., alex.kim" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
            <div>
              <label for="desiredPassword" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardPasswordLabel">Preferred password</label>
              <input id="desiredPassword" name="desiredPassword" type="password" required minlength="8" data-i18n-placeholder="wizardPasswordPlaceholder" placeholder="At least 8 characters" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
          </div>
        </div>

        <!-- Step 7: Contact details -->
        <div data-step="6" class="step-panel hidden">
          <div class="grid gap-4">
            <div>
              <label for="phone" class="block text-sm font-medium text-[var(--color-brand-text)]"><span data-i18n="wizardPhoneLabel">Your phone number</span><span class="text-brand-cta"> *</span></label>
              <input id="phone" name="phone" type="tel" required data-i18n-placeholder="wizardPhonePlaceholder" placeholder="e.g., +82 10-1234-5678" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
            <div>
              <label for="email" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardEmailLabel">Your email address (optional)</label>
              <input id="email" name="email" type="email" data-i18n-placeholder="wizardEmailPlaceholder" placeholder="e.g., you@company.com" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
            <div>
              <label for="telegram" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardTelegramLabel">Telegram (optional)</label>
              <input id="telegram" name="telegram" type="text" data-i18n-placeholder="wizardTelegramPlaceholder" placeholder="@yourhandle" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
            <div>
              <label for="kakaotalk" class="block text-sm font-medium text-[var(--color-brand-text)]" data-i18n="wizardKakaoLabel">KakaoTalk (optional)</label>
              <input id="kakaotalk" name="kakaotalk" type="text" data-i18n-placeholder="wizardKakaoPlaceholder" placeholder="ID or phone" class="mt-2 w-full rounded-xl border px-4 py-3 shadow-sm outline-none transition focus:ring-2 border-brand-cta-text/25 bg-white text-[#1a1a1a] placeholder:text-gray-500 focus:border-brand-cta focus:ring-brand-cta/40 dark:border-white/20 dark:bg-neutral-800 dark:text-white dark:placeholder:text-gray-400" />
            </div>
          </div>
        </div>

        <!-- Controls -->
        <div class="flex items-center justify-between">
          <button type="button" id="wizard-back" class="rounded-full border px-5 py-2.5 text-sm font-semibold shadow-sm transition disabled:opacity-60 border-brand-cta/30 bg-white/80 text-brand-text hover:bg-white dark:border-white/30 dark:bg-white/10 dark:text-[var(--color-brand-text)] dark:hover:bg-white/15" disabled data-i18n="wizardBack">Back</button>
          <div class="flex items-center gap-3">
            <button type="button" id="wizard-next" class="rounded-full bg-brand-cta px-6 py-2.5 text-sm font-semibold text-brand-cta-text dark:text-brand-cta-text shadow-[0_16px_40px_-20px_rgba(26,77,26,0.55)] transition hover:scale-[1.02] disabled:opacity-60" data-i18n="wizardNext">Next</button>
            <button type="submit" id="wizard-submit" class="hidden rounded-full bg-brand-cta px-6 py-2.5 text-sm font-semibold text-brand-cta-text dark:text-brand-cta-text shadow-[0_16px_40px_-20px_rgba(26,77,26,0.55)] transition hover:scale-[1.02] disabled:opacity-60" data-i18n="wizardSubmit">Request demo</button>
          </div>
        </div>
      </form>

      <div id="wizard-success" class="mt-6 hidden rounded-xl border bg-[var(--color-brand-bg)] p-4 text-sm text-[var(--color-brand-text)] shadow-sm dark:border-white/20">
        <div class="flex items-start gap-3">
          <svg class="mt-0.5 h-5 w-5 text-brand-cta" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M5 13l4 4L19 7" stroke-linecap="round" stroke-linejoin="round"/></svg>
          <p data-i18n="wizardSuccessMessage">Thanks — we've received your request. A demo account with username and password will be shared via your preferred contact. To continue beyond the demo, you can switch to the Pro plan at any time.</p>
        </div>
        <div class="mt-4 flex justify-end">
          <button type="button" id="wizard-success-close" class="rounded-full bg-brand-cta px-5 py-2 text-sm font-semibold text-brand-cta-text" data-i18n="wizardSuccessCta">Close</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  (function planWizard(){
    const modal = document.getElementById('plan-wizard');
    const form = document.getElementById('wizard-form');
    const back = document.getElementById('wizard-back');
    const next = document.getElementById('wizard-next');
    const submitBtn = document.getElementById('wizard-submit');
    const closeBtn = document.getElementById('wizard-close');
    const stepLabel = document.getElementById('wizard-step-label');
    const planLabel = document.getElementById('wizard-plan-label');
    const titleEl = document.getElementById('wizard-title');
    const dialog = modal?.querySelector('[role="dialog"]');
    const panels = Array.from(form?.querySelectorAll('.step-panel') || []);
    let step = 0;
    let plan = '';
    const LS_KEY = 'kdsx-wizard-state';
    const CONFIG_ENDPOINT = modal?.getAttribute('data-endpoint') || '';
    let lastActive = null;
    let keydownHandler = null;
    const analytics = (event, data={}) => {
      try { window.dispatchEvent(new CustomEvent('kdsx.analytics', { detail: { event, ...data } })); } catch(_) {}
      try { console.info('[analytics]', event, data); } catch(_) {}
    };

    const sendMailFallback = (payload) => {
      try {
        const to = modal?.getAttribute('data-email') || 'info@kdsx.uz';
        const subject = encodeURIComponent(`KDSX Lead — ${payload.plan || 'N/A'}`);
        const bodyLines = [
          `Plan: ${payload.plan}`,
          `Name: ${payload.fullName}`,
          `Business: ${payload.businessName}`,
          `Locations: ${payload.locations}`,
          `Service style: ${payload.serviceStyle}`,
          `Current POS: ${payload.currentPos}`,
          `Username: ${payload.desiredUsername}`,
          `Phone: ${payload.phone}`,
          `Email: ${payload.email}`,
          `Telegram: ${payload.telegram}`,
          `KakaoTalk: ${payload.kakaotalk}`,
          `Submitted: ${payload.timestamp}`,
        ];
        const body = encodeURIComponent(bodyLines.join('\n'));
        const mailto = `mailto:${to}?subject=${subject}&body=${body}`;
        window.location.href = mailto;
      } catch (_) {}
    };

    const translationsNode = document.getElementById('translations-data');
    const fallbackLang = translationsNode?.dataset?.fallback || 'en';
    let dictionaries = {};
    try { dictionaries = translationsNode ? JSON.parse(translationsNode.textContent || '{}') : {}; } catch(_) { dictionaries = {}; }
    const currentLang = document.documentElement.getAttribute('lang') || fallbackLang;
    const t = (key) => {
      const dict = dictionaries[currentLang] || dictionaries[fallbackLang] || {};
      return (dict[key] ?? '');
    };

    const applyPlaceholders = () => {
      document.querySelectorAll('[data-i18n-placeholder]')?.forEach((el) => {
        const key = el.getAttribute('data-i18n-placeholder');
        if (!key) return;
        const val = t(key);
        if (val) el.setAttribute('placeholder', val);
      });
    };

    const applyAriaLabels = () => {
      document.querySelectorAll('[data-i18n-aria-label]')?.forEach((el) => {
        const key = el.getAttribute('data-i18n-aria-label');
        if (!key) return;
        const val = t(key);
        if (val) el.setAttribute('aria-label', val);
      });
    };

    const setBodyScroll = (lock) => {
      const html = document.documentElement;
      if (lock) html.classList.add('overflow-hidden'); else html.classList.remove('overflow-hidden');
    };

    const showStep = (idx) => {
      step = Math.max(0, Math.min(idx, panels.length - 1));
      panels.forEach((p, i) => p.classList.toggle('hidden', i !== step));
      back.disabled = step === 0;
      next.classList.toggle('hidden', step === panels.length - 1);
      submitBtn.classList.toggle('hidden', step !== panels.length - 1);
      const template = t('wizardStepTemplate') || 'Step {current} of {total}';
      stepLabel.textContent = template.replace('{current}', String(step + 1)).replace('{total}', String(panels.length));
      analytics('wizard_step_view', { step });
    };

    const getFocusable = () => {
      if (!dialog) return [];
      return Array.from(dialog.querySelectorAll(
        'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex]:not([tabindex="-1"])'
      ));
    };

    const trapFocus = (e) => {
      if (e.key !== 'Tab') return;
      const f = getFocusable();
      if (!f.length) return;
      const first = f[0];
      const last = f[f.length - 1];
      if (e.shiftKey) {
        if (document.activeElement === first) {
          e.preventDefault();
          last.focus();
        }
      } else {
        if (document.activeElement === last) {
          e.preventDefault();
          first.focus();
        }
      }
    };

    const open = (planName) => {
      lastActive = document.activeElement;
      plan = planName;
      const planDisplay = (() => {
        if (planName === 'starter') return t('pricingStarterLabel') || 'Starter';
        if (planName === 'pro') return t('pricingProLabel') || 'Pro';
        if (planName === 'enterprise') return t('pricingEnterpriseTitle') || 'Enterprise';
        return t('pricingProLabel') || (planName[0]?.toUpperCase() + planName.slice(1));
      })();
      if (planLabel) planLabel.textContent = `${t('wizardPlanPrefix') || 'Plan:'} ${planDisplay}`;
      if (titleEl) {
        const titleMap = {
          starter: t('wizardTitleStarter') || 'Get your free month — Starter',
          pro: t('wizardTitlePro') || 'Get started with Pro',
          enterprise: t('wizardTitleEnterprise') || 'Talk to sales — Enterprise',
          cta: t('wizardTitleGeneric') || 'Request a demo',
        };
        titleEl.textContent = titleMap[planName] || (t('wizardTitleGeneric') || 'Request a demo');
      }
      modal.classList.remove('hidden');
      showStep(0);
      setBodyScroll(true);
      requestAnimationFrame(() => {
        const first = panels[0].querySelector('input');
        first && first.focus && first.focus();
      });
      applyPlaceholders();
      applyAriaLabels();
      keydownHandler = (e) => {
        if (e.key === 'Escape') { close(); return; }
        trapFocus(e);
      };
      document.addEventListener('keydown', keydownHandler);
      try {
        const saved = JSON.parse(localStorage.getItem(LS_KEY) || '{}');
        if (saved && saved.plan === planName) {
          form.fullName && (form.fullName.value = saved.fullName || '');
          form.businessName && (form.businessName.value = saved.businessName || '');
          form.locations && (form.locations.value = saved.locations || '');
          form.currentPos && (form.currentPos.value = saved.currentPos || '');
          form.desiredUsername && (form.desiredUsername.value = saved.desiredUsername || '');
          form.serviceStyle && (form.serviceStyle.value = saved.serviceStyle || '');
          form.phone && (form.phone.value = saved.phone || '');
          form.email && (form.email.value = saved.email || '');
          form.telegram && (form.telegram.value = saved.telegram || '');
          form.kakaotalk && (form.kakaotalk.value = saved.kakaotalk || '');
        }
      } catch(_) {}
      analytics('wizard_open', { plan: planName });
    };

    const close = () => {
      modal.classList.add('hidden');
      setBodyScroll(false);
      form?.reset();
      const success = document.getElementById('wizard-success');
      success?.classList.add('hidden');
      if (keydownHandler) { document.removeEventListener('keydown', keydownHandler); keydownHandler = null; }
      if (lastActive && lastActive.focus) {
        try { lastActive.focus(); } catch(_) {}
      }
      analytics('wizard_close', { plan });
    };

    document.querySelectorAll('[data-plan-trigger]')?.forEach((el) => {
      el.addEventListener('click', (e) => {
        e.preventDefault();
        const planName = el.getAttribute('data-plan-trigger') || 'starter';
        open(planName);
      });
    });

    closeBtn?.addEventListener('click', close);
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) close();
    });

    back?.addEventListener('click', () => showStep(step - 1));
    next?.addEventListener('click', () => {
      const currentPanel = panels[step];
      const requiredInputs = Array.from(currentPanel.querySelectorAll('input[required]'));
      for (const input of requiredInputs) {
        if (!input.value.trim()) { input.focus(); return; }
      }
      const requiredSelects = Array.from(currentPanel.querySelectorAll('select[required]'));
      for (const sel of requiredSelects) {
        if (!sel.value) { sel.focus(); return; }
      }
      try {
        const state = {
          plan,
          fullName: form.fullName?.value || '',
          businessName: form.businessName?.value || '',
          locations: form.locations?.value || '',
          currentPos: form.currentPos?.value || '',
          desiredUsername: form.desiredUsername?.value || '',
          serviceStyle: form.serviceStyle?.value || '',
          phone: form.phone?.value || '',
          email: form.email?.value || '',
          telegram: form.telegram?.value || '',
          kakaotalk: form.kakaotalk?.value || '',
        };
        localStorage.setItem(LS_KEY, JSON.stringify(state));
      } catch(_) {}
      analytics('wizard_step_next', { step });
      showStep(step + 1);
    });

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const phone = form.querySelector('#phone');
      if (phone && !phone.value.trim()) { phone.focus(); return; }

      const payload = {
        plan,
        fullName: form.fullName?.value || '',
        businessName: form.businessName?.value || '',
        locations: form.locations?.value || '',
        serviceStyle: form.serviceStyle?.value || '',
        currentPos: form.currentPos?.value || '',
        desiredUsername: form.desiredUsername?.value || '',
        desiredPassword: form.desiredPassword?.value || '',
        phone: form.phone?.value || '',
        email: form.email?.value || '',
        telegram: form.telegram?.value || '',
        kakaotalk: form.kakaotalk?.value || '',
        timestamp: new Date().toISOString(),
      };

      try {
        analytics('wizard_submit', { plan });
        submitBtn.disabled = true;
        next.disabled = true;
        back.disabled = true;
        submitBtn.textContent = t('wizardSubmitting') || 'Submitting…';
        if (CONFIG_ENDPOINT) {
          const response = await fetch(CONFIG_ENDPOINT, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(payload),
          });
          if (!response.ok) {
            const err = new Error(`Lead endpoint returned ${response.status}`);
            err.status = response.status;
            throw err;
          }
        } else {
          console.warn('[wizard] No lead endpoint configured. Set data-endpoint on #plan-wizard. Payload:', payload);
          // Fallback: compose an email with the submission so you still receive the lead.
          sendMailFallback(payload);
          await new Promise((res)=> setTimeout(res, 400));
        }

        form.classList.add('hidden');
        const success = document.getElementById('wizard-success');
        success?.classList.remove('hidden');
        try { localStorage.removeItem(LS_KEY); } catch(_) {}
      } catch (err) {
        console.error('Failed to submit lead', err);
        analytics('wizard_submit_error', { plan, status: err?.status || null });
        sendMailFallback(payload);
        submitBtn.disabled = false;
        next.disabled = false;
        back.disabled = step === 0;
        submitBtn.textContent = t('wizardSubmit') || 'Request demo';
        alert(t('wizardError') || 'Something went wrong. Please try again. We opened your email client so you can send the request manually.');
      }
    });

    document.getElementById('wizard-success-close')?.addEventListener('click', close);

    document.querySelectorAll('.lang-select')?.forEach((sel) => {
      sel.addEventListener('change', () => setTimeout(() => { applyPlaceholders(); applyAriaLabels(); }, 50));
    });
    applyPlaceholders();
    applyAriaLabels();
  })();
</script>
